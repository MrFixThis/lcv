name: Build and Release (LCV)

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:

permissions:
  contents: write  # needed to create/upload release assets on tags

jobs:
  lint:
    name: Clippy (lint)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust (stable + clippy)
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          cache-all-crates: true

      - name: Run clippy (fail on warnings)
        run: cargo clippy --all-targets --all-features -- -D warnings

  build:
    name: Build ${{ matrix.os_label }}
    runs-on: ${{ matrix.os }}
    needs: [lint]
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            os_label: linux-x86_64
            artifact_ext: zip
            bin_path: target/release/lcv
            zip_cmd: zip
          - os: macos-latest
            os_label: macos-arm64
            artifact_ext: zip
            bin_path: target/release/lcv
            zip_cmd: zip
          - os: windows-latest
            os_label: windows-x86_64
            artifact_ext: zip
            bin_path: target\release\lcv.exe
            zip_cmd: powershell

    env:
      VERSION: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('snapshot-{0}', github.sha) }}
      BIN_NAME: lcv

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          cache-all-crates: true

      - name: Build (release)
        run: cargo build --release --locked

      - name: Prepare dist folder
        run: mkdir -p dist

      # Package for Linux & macOS (.zip via "zip")
      - name: Package (zip) - *nix
        if: ${{ matrix.zip_cmd == 'zip' }}
        shell: bash
        run: |
          set -euxo pipefail
          NAME="${BIN_NAME}-${VERSION}-${{ matrix.os_label }}"
          STAGE="dist/${NAME}"
          mkdir -p "${STAGE}"
          cp "${{ matrix.bin_path }}" "${STAGE}/"
          chmod +x "${STAGE}/${BIN_NAME}"
          [ -f README.md ] && cp README.md "${STAGE}/"
          [ -f LICENSE ] && cp LICENSE "${STAGE}/" || true
          (cd dist && zip -r "${NAME}.zip" "${NAME}")

      # Package for Windows (.zip via PowerShell)
      - name: Package (zip) - Windows
        if: ${{ matrix.zip_cmd == 'powershell' }}
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $name  = "${env:BIN_NAME}-${env:VERSION}-${{ matrix.os_label }}"
          $stage = "dist/$name"
          New-Item -ItemType Directory -Force -Path $stage | Out-Null
          Copy-Item "${{ matrix.bin_path }}" "$stage/"
          if (Test-Path "README.md") { Copy-Item "README.md" "$stage/" }
          if (Test-Path "LICENSE")   { Copy-Item "LICENSE"   "$stage/" }
          Compress-Archive -Path "$stage/*" -DestinationPath "dist/$name.zip" -Force

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BIN_NAME }}-${{ env.VERSION }}-${{ matrix.os_label }}.zip
          path: dist/${{ env.BIN_NAME }}-${{ env.VERSION }}-${{ matrix.os_label }}.zip
          if-no-files-found: error
          compression-level: 0

  release:
    name: Publish Release (on tag)
    needs: [build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Gather asset paths
        id: gather
        run: |
          echo "files<<EOF" >> $GITHUB_OUTPUT
          find dist -type f -name "*.zip" -print >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release & Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: ${{ steps.gather.outputs.files }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
